Course4 - Shortest Paths Revisited, NP-Complete Problems and What To Do About Them

###  WEEK 1 
# Set1
Q1: Consider a directed graph with real-valued edge lengths and no negative-cost cycles. Let s be a source vertex. Assume that there is a unique shortest path from s to every other vertex. What can you say about the subgraph of G that you get by taking the union of these shortest paths? [Pick the strongest statement that is guaranteed to be true.]
An: It is a tree, with all edges directed away from s.

Q2: Consider the following optimization to the Bellman-Ford algorithm. Given a graph G=(V,E) with real-valued edge lengths, we label the vertices V={1,2,3,…,n}. The source vertex s should be labeled "1", but the rest of the labeling can be arbitrary. Call an edge (u,v)∈E forward if u<v and backward if u>v. In every odd iteration of the outer loop (i.e., when i=1,3,5,...), we visit the vertices in the order from 1 to n. In every even iteration of the outer loop (when i=2,4,6,...), we visit the vertices in the order from n to 1. In every odd iteration, we update the value of A[i,v] using only the forward edges of the form (w,v), using the most recent subproblem value for w (that from the current iteration rather than the previous one). That is, we compute A[i,v]=min{A[i−1,v],min(w,v)A[i,w]+cwv}, where the inner minimum ranges only over forward edges sticking into v (i.e., with w<v). Note that all relevant subproblems from the current round (A[i,w] for all w<v with (w,v)∈E) are available for constant-time lookup. In even iterations, we compute this same recurrence using only the backward edges (again, all relevant subproblems from the current round are available for constant-time lookup). Which of the following is true about this modified Bellman-Ford algorithm?
An: It correctly computes shortest paths if and only if the input graph has no negative-cost cycle.

Q3: Consider a directed graph with real-valued edge lengths and no negative-cost cycles. Let s be a source vertex. Assume that each shortest path from s to another vertex has at most k edges. How fast can you solve the single-source shortest path problem? (As usual, n and m denote the number of vertices and edges, respectively.) [Pick the strongest statement that is guaranteed to be true.]
An: O(kn)

Q4: Consider a directed graph in which every edge has length 1. Suppose we run the Floyd-Warshall algorithm with the following modification: instead of using the recurrence A[i,j,k] = min{A[i,j,k-1], A[i,k,k-1] + A[k,j,k-1]}, we use the recurrence A[i,j,k] = A[i,j,k-1] + A[i,k,k-1] * A[k,j,k-1]. For the base case, set A[i,j,0] = 1 if (i,j) is an edge and 0 otherwise. What does this modified algorithm compute -- specifically, what is A[i,j,n] at the conclusion of the algorithm?
An: None of the other answers are correct.

Q5:Suppose we run the Floyd-Warshall algorithm on a directed graph G=(V,E) in which every edge's length is either -1, 0, or 1. Suppose further that G is strongly connected, with at least one u-v path for every pair u,v of vertices. The graph G may or may not have a negative-cost cycle. How large can the final entries A[i,j,n] be, in absolute value? Choose the smallest number that is guaranteed to be a valid upper bound. (As usual, n denotes |V|.) [WARNING: for this question, make sure you refer to the implementation of the Floyd-Warshall algorithm given in lecture, rather than to some alternative source.]
An: 2n

# Set2
The first line indicates the number of vertices and edges, respectively. Each subsequent line describes an edge (the first two numbers are its tail and head, respectively) and its length (the third number). NOTE: some of the edge lengths are negative. NOTE: These graphs may or may not have negative-cost cycles.
Your task is to compute the "shortest shortest path". Precisely, you must first identify which, if any, of the three graphs have no negative cycles. For each such graph, you should compute all-pairs shortest paths and remember the smallest one (i.e., compute minu,v∈Vd(u,v), where d(u,v) denotes the shortest-path distance from u to v).
If each of the three graphs has a negative-cost cycle, then enter "NULL" in the box below. If exactly one graph has no negative-cost cycles, then enter the length of its shortest shortest path in the box below. If two or more of the graphs have no negative-cost cycles, then enter the smallest of the lengths of their shortest shortest paths in the box below.
OPTIONAL: You can use whatever algorithm you like to solve this question. If you have extra time, try comparing the performance of different all-pairs shortest-path algorithms!
OPTIONAL: Here is a bigger data set to play with.
An: -19

### WEEK 2
# Set1
Q1: Which of the following statements cannot be true, given the current state of knowledge?
An: Some NP-complete problems are polynomial-time solvable, and some NP-complete problems are not polynomial-time solvable.

Q2: Let TSP1 denote the following problem: given a TSP instance in which all edge costs are positive integers, compute the value of an optimal TSP tour. Let TSP2 denote: given a TSP instance in which all edge costs are positive integers, and a positive integer T, decide whether or not there is a TSP tour with total length at most T. Let HAM1 denote: given an undirected graph, either return the edges of a Hamiltonian cycle (a cycle that visits every vertex exactly once), or correctly decide that the graph has no such cycle. Let HAM2 denote: given an undirected graph, decide whether or not the graph contains at least one Hamiltonian cycle.
An: If TSP2 is polynomial-time solvable, then so is TSP1. If HAM2 is polynomial-time solvable, then so is HAM1.

Q3: Assume that P≠NP. Consider undirected graphs with nonnegative edge lengths. Which of the following problems can be solved in polynomial time?
Hint: The Hamiltonian path problem is: given an undirected graph with n vertices, decide whether or not there is a (cycle-free) path with n−1 edges that visits every vertex exactly once. You can use the fact that the Hamiltonian path problem is NP-complete. There are relatively simple reductions from the Hamiltonian path problem to 3 of the 4 problems below.
An: For a given source s and destination t, compute the length of a shortest s-t path that has exactly n−1 edges (or +∞, if no such path exists). The path is allowed to contain cycles.

Q4: Choose the strongest true statement.
An: All three of the other assertions are true.

Q5: Which of the following statements is true?
An: Consider a TSP instance in which every edge cost is the Euclidean distance between two points in the place (just like in Programming Assignment #5). Deleting a vertex and all of its incident edges cannot increase the cost of the optimal (i.e., minimum sum of edge lengths) tour.

# Set2
Q: In this assignment you will implement one or more algorithms for the traveling salesman problem, such as the dynamic programming algorithm covered in the video lectures. Here is a data file describing a TSP instance.
An: 26442

### WEEK 3
# Set1 
Q1: n the set cover problem, you are given m sets S1,...,Sm, each a subset of a common set U with size |U|=n. The goal is to select as few of these sets as possible, subject to the constraint that the union of the chosen sets is all of U. (You can assume that ∪mi=1Si=U.) For example, if the given sets are {1,2}, {2,3}, and {3,4}, then the optimal solution consists of the sets {1,2} and {3,4}.
Here is a natural iterative greedy algorithm. First, initialize C=∅, where C denotes the sets chosen so far. The main loop is: as long as the union ∪S∈CS of the sets chosen so far is not the entire set U:
Let Si be a set that includes the maximum-possible number of elements not in previously-chosen sets (i.e., that maximizes |Si−∪S∈CS|).
Add Si to C.
Consider the following statement: for every instance of the set cover problem (with |U|=n), this greedy algorithm returns a set cover with size at most f(n) times that of an optimal (minimum-size) set cover. Which of the following is the smallest choice of the function f(n) for which this statement is true?
[Hint: what's the mininum-possible progress that the greedy algorithm can make in each iteration, as a function of the size of an optimal set cover and of the number of elements that have not yet been covered?]
An: O(logn)

Q2: Consider the same makespan-minimization job scheduling problem studied in the previous problem. Now suppose that, prior to running the greedy algorithm in the previous problem, we first sort the jobs from biggest to smallest. For example, in the four-job instance discussed in the previous problem, the jobs would be considered in the order 8,7,6,5, and the greedy algorithm would then produce an optimal schedule, with makespan 13.
Consider the following statement: for every such job scheduling instance, the greedy algorithm (with this sorting preprocessing step) computes a job assignment with makespan at most c times that of an optimal (minimum-makespan) job assignment. Which of the following is the smallest choice of the constant c for which this statement is true?
An: 3/2

# Set2
An: 1203406

### WEEK4







